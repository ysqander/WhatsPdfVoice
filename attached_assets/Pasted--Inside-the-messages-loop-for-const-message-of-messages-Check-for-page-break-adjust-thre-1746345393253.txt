// Inside the messages loop
for (const message of messages) {
  // Check for page break (adjust threshold based on content density)
  // Estimate height needed: header line + content lines + padding
  const estimatedHeight = 15 + /* estimate content lines */ 15 * estimateLines(message.content, timesRomanFont, 10, width - margin * 2 - 30) + 20;
  if (y < margin + estimatedHeight) {
      // Add page number to old page before creating new one
      addPageNumber(currentPage, pdfDoc.getPageCount(), pdfDoc.getPageCount() + 1, timesRomanFont, margin);
      currentPage = pdfDoc.addPage();
      y = height - margin - 20; // Reset Y for new page, leave top margin
      addPageNumber(currentPage, pdfDoc.getPageCount(), pdfDoc.getPageCount(), timesRomanFont, margin); // Add page number to new page
  }

  const timestamp = format(new Date(message.timestamp), "HH:mm:ss"); // Add seconds for precision
  const senderColor = message.sender === chatData.participants?.[0] ? primaryColor : secondaryColor;

  // Message Header: Timestamp and Sender on one line
  const headerText = `[${timestamp}] ${message.sender}:`;
  currentPage.drawText(headerText, {
    x: margin, // Start at left margin
    y: y,
    size: 10,
    font: timesRomanBoldFont, // Bold sender
    color: senderColor,
  });
  y -= 15; // Space after header line

  // Message Content: Indented below header
  const contentX = margin + 15; // Indent content slightly
  const contentMaxWidth = width - contentX - margin; // Max width for content

  if (message.type === "text") {
    // Use a helper function for text wrapping
    const { lines, finalY } = drawWrappedText(
        currentPage,
        message.content,
        timesRomanFont,
        10,
        contentX,
        y,
        contentMaxWidth,
        15, // Line height
        textColor
    );
    y = finalY - 10; // Update Y and add padding below text
  } else if (message.type === "voice" && message.mediaUrl) {
     // ... (Voice message handling - see next section) ...
     y -= 20; // Space after voice message block
  } else if (message.type === "image" && message.mediaUrl) {
    const imageName = path.basename(message.mediaUrl);
    const imageText = `[Image: ${imageName}] (Included in evidence package)`;
    currentPage.drawText(imageText, {
      x: contentX,
      y: y,
      size: 10,
      font: timesRomanFont, // Italic font if available/desired
      color: rgb(0.4, 0.4, 0.4), // Greyed out
    });
    y -= 15; // Space after image placeholder
  } else if (message.type === "attachment" && message.mediaUrl) {
    const fileName = path.basename(message.mediaUrl);
    const fileText = `[File: ${fileName}] (Included in evidence package)`;
     currentPage.drawText(fileText, {
      x: contentX,
      y: y,
      size: 10,
      font: timesRomanFont, // Italic font if available/desired
      color: rgb(0.4, 0.4, 0.4), // Greyed out
    });
    y -= 15; // Space after file placeholder
  } else {
     // Handle other types or messages without mediaUrl if necessary
     currentPage.drawText(`[Unsupported Message Type: ${message.type}]`, {
        x: contentX, y: y, size: 9, font: timesRomanFont, color: rgb(0.6, 0, 0)
     });
     y -= 15;
  }

  y -= 10; // Consistent spacing between messages
}
import AdmZip from 'adm-zip';
import fs from 'fs';
import path from 'path';

export interface WhatsAppMessage {
  id: string;
  timestamp: Date;
  sender: string;
  content: string;
  isVoiceMessage: boolean;
  attachment?: string;     // <-- new
}

export async function parseWhatsAppChat(zipPath: string, extractDir: string): Promise<WhatsAppMessage[]> {
  console.log('\n=== Starting WhatsApp Chat Parsing ===');
  const zip = new AdmZip(zipPath);
  zip.extractAllTo(extractDir, true);

  const files = fs.readdirSync(extractDir);
  const txtFile = files.find(f => f.toLowerCase().endsWith('.txt'));
  if (!txtFile) throw new Error('No text file found in the ZIP');

  // 1) read + strip BOM and all directional controls
  let raw = fs.readFileSync(path.join(extractDir, txtFile), 'utf8');
  raw = raw
    .replace(/^\uFEFF/, '')                         // BOM
    .replace(/[\u200E\u200F\u202A-\u202E]/g, '')     // LTR/RTL marks
    .replace(/\r\n/g, '\n');

  const lines = raw.split('\n').map(l => l.trim()).filter(l => l);

  const messagePattern = /^\[?(\d{1,2}[./]\d{1,2}[./](?:\d{2}|\d{4})),?\s*(\d{1,2}:\d{2}(?::\d{2})?)?\]?\s+(.+?):\s*(.*)$/;
  let idCounter = 0;
  const messages: WhatsAppMessage[] = [];

  for (const line of lines) {
    const m = messagePattern.exec(line);
    if (!m) {
      console.warn('Skipped (no match):', line);
      continue;
    }
    let [, datePart, timePart = '00:00:00', sender, content] = m;

    // pull out any <attached: file.opus> so we know the actual filename
    const attach = content.match(/<attached:\s*([-\w]+\.opus)>/i);
    const isVoice = Boolean(attach);
    const attachment = attach ? attach[1] : undefined;

    // normalize date
    let [d, M, y] = datePart.split(/[./]/).map(s => s.padStart(2,'0'));
    if (y.length === 2) {
      const yy = parseInt(y, 10);
      y = yy < 50 ? `20${y}` : `19${y}`;
    }
    const [hh, mm, ss] = timePart.split(':').map(s => s.padStart(2,'0'));

    const ts = new Date(
      Number(y), Number(M) - 1, Number(d),
      Number(hh), Number(mm), Number(ss)
    );

    messages.push({
      id: (++idCounter).toString(),
      timestamp: ts,
      sender: sender.trim(),
      content: content.trim(),
      isVoiceMessage: isVoice,
      attachment
    });
  }

  console.log(`Parsed ${messages.length} messages.`);

  // hand off to your voice-processing routine, which can now
  // look up `msg.attachment` and find the .opus in extractDir
  return await processVoiceMessages(messages, extractDir);
}